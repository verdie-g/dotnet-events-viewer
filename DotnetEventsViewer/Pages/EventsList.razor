@page "/list"

@using NetTrace
@using DotnetEventsViewer.Components
@using DotnetEventsViewer.Querying
@using DotnetEventsViewer.State

@inject StateContainer State
@inject IDialogService DialogService;

<PageTitle>@State.TraceExtraMetadata!.Filename | Events List</PageTitle>

<h1>Events List</h1>

<QueryBuilder QueryType="QueryType.List" OnQuery="OnQuery" />

@if (_events != null)
{
    <FluentDataGrid
        TGridItem="Event"
        Items="@_events"
        ItemKey="@(e => e.Index)"
        Virtualize="true"
        ResizableColumns="true"
        OnRowClick="OnRowClick"
        ShowHover="true"
        ItemSize="32">
        <ChildContent>
            @foreach (var f in _columnFields!)
            {
                <PropertyColumn Title="@f.Name" Property="@(e => f.Selector(e))" Sortable="true"/>
            }
        </ChildContent>
        <EmptyContent>
            No events.
        </EmptyContent>
    </FluentDataGrid>
}

@code {
    private IQueryable<Event>? _events;
    private IEnumerable<Field>? _columnFields;

    private void OnQuery(QueryResult queryResult)
    {
        _events = queryResult.FilteredEvents.AsQueryable();
        _columnFields = queryResult.ColumnFields;
    }

    private async Task OnRowClick(FluentDataGridRow<Event> eventRow)
    {
        var evt = eventRow.Item;
        if (evt == null) // Header row.
        {
            return;
        }

        await DialogService.ShowPanelAsync<EventDialogContent>(evt, new DialogParameters<Event>
        {
            Content = evt,
            Alignment = HorizontalAlignment.Right,
            Width = "600px",
            Title = $"{evt.Metadata.EventName} {evt.Index}",
            PrimaryAction = null,
            SecondaryAction = null,
        });
    }

}