@page "/"
@using DotnetEventsViewer.State
@using EventPipe
@using DotnetEventsViewer.Models
@using DotnetEventsViewer.Querying

@layout HomeLayout

@inject StateContainer StateContainer
@inject NavigationManager NavigationManager
@inject IMessageService MessageService

<PageTitle>.NET Events Viewer</PageTitle>

<h1>.NET Events Viewer</h1>

<p>
    This project is a modern <a href="https://github.com/microsoft/perfview" target="_blank">PerfView</a> alternative to
    analysis nettrace files collected from the .NET runtime's <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/eventpipe" target="_blank">EventPipe</a>
    or through the tool <a href="https://learn.microsoft.com/en-us/dotnet/core/diagnostics/dotnet-trace" target="_blank">dotnet-trace</a>.
</p>

<p>
    This analysis tool is compiled to WebAssembly, ensuring that everything runs within your browser, and trace files
    remain confined to it. You can check out the code on <a href="https://github.com/verdie-g/dotnet-events-viewer" target="_blank">GitHub</a>.
</p>

<FluentMessageBarProvider Section="FileUploadError" />

<FluentInputFile Id="input-nettrace-file"
                 Mode="InputFileMode.Stream"
                 MaximumFileCount="1"
                 MaximumFileSize="@(5L*1024*1024*1024)"
                 Accept=".nettrace"
                 @bind-ProgressPercent="@_progressPercent"
                 OnCompleted="OnCompletedAsync"
                 OnFileUploaded="@OnFileUploadedAsync"
                 Style="height: 300px; border: 1px dashed var(--accent-fill-rest);">
    <ChildContent>
        <label for="input-nettrace-file">
            <FluentIcon Value="@(new Icons.Regular.Size24.ArrowUpload())" />
        </label>

        <div>
            Drag nettrace file here you wish to analyze, or <label for="input-nettrace-file">browse</label> for it.
            <br />
            <em>Files never exit your browser.</em>
        </div>
    </ChildContent>
</FluentInputFile>

<h2 style="margin-top: 8px">Collect events with dotnet-trace</h2>

<p>
    Here are a few examples about how to collect the most common EventPipe events. These commands will generate a
    nettrace file that you can drop up there.
</p>

<h3>Collect allocation events</h3>

<pre><code>dotnet-trace collect --clrevents gc --clreventlevel verbose --process-id $PID</code></pre>

<h3>Collect CPU samples</h3>

<pre><code>dotnet-trace collect --profile cpu-sampling --process-id $PID</code></pre>

<h3>Collect contention events</h3>

<pre><code>dotnet-trace collect --clrevents contention --process-id $PID</code></pre>

<h3>Collect wait events</h3>

<pre><code>dotnet-trace collect --clrevents waithandle --clreventlevel verbose --process-id $PID</code></pre>


@code {
    private int _progressPercent;

    private Task OnCompletedAsync(IEnumerable<FluentInputFileEventArgs> inputFiles)
    {
        string? errorMessage = inputFiles.FirstOrDefault()?.ErrorMessage;
        if (errorMessage != null)
        {
            ShowFileError(errorMessage);
        }

        return Task.CompletedTask;
    }

    private async Task OnFileUploadedAsync(FluentInputFileEventArgs inputFile)
    {
        // Remove reference to previously loaded trace.
        StateContainer.Trace = null;

        EventPipeReader reader = new(inputFile.Stream!);
        reader.AddProgress(new Progress<EventPipeReader.Progression>(p =>
        {
            int progressPercent = (int)(100f * p.BytesRead / inputFile.Size);
            if (progressPercent == _progressPercent)
            {
                return;
            }

            _progressPercent = progressPercent;
            StateHasChanged();
        }));

        try
        {
            StateContainer.Trace = await reader.ReadFullTraceAsync();
        }
        catch (Exception e)
        {
            Console.Error.WriteLine(e);
            ShowFileError(e is JSException or OutOfMemoryException
                ? "File is too large to fit in memory. Please upvote issue https://github.com/dotnet/runtime/issues/102574"
                : "Invalid nettrace file");
            return;
        }

        StateContainer.TraceExtraMetadata = CreateTraceExtraMetadata(inputFile.Name, StateContainer.Trace);
        StateContainer.Query = new Query();

        NavigationManager.NavigateTo("list");
    }

    private void ShowFileError(string errorMessage)
    {
        MessageService.ShowMessageBar(options =>
        {
            options.Title = errorMessage;
            options.Section = "FileUploadError";
            options.Intent = MessageIntent.Error;
        });
    }

    private TraceExtraMetadata CreateTraceExtraMetadata(string filename, Trace trace)
    {
        const string processInfoProviderName = KnownProviders.EventPipe;
        const int processInfoEventId = 1;
        var processInfoEvent = trace.Events.FirstOrDefault(e =>
            e.Metadata is { EventId: processInfoEventId, ProviderName: processInfoProviderName });
        string commandLine = "";
        string osFamily = "";
        if (processInfoEvent != null)
        {
            commandLine = (string)processInfoEvent.Payload["CommandLine"];
            osFamily = (string)processInfoEvent.Payload["OSInformation"];
        }

        const string runtimeInfoProviderName = KnownProviders.Rundown;
        const int runtimeInfoEventId = 187;
        var runtimeInfoEvent = trace.Events.FirstOrDefault(e =>
            e.Metadata is { EventId: runtimeInfoEventId, ProviderName: runtimeInfoProviderName });
        Version runtimeVersion = new(0, 0);
        if (runtimeInfoEvent != null)
        {
            ushort runtimeMajorVersion = (ushort)runtimeInfoEvent.Payload["BclMajorVersion"];
            ushort runtimeMinorVersion = (ushort)runtimeInfoEvent.Payload["BclMinorVersion"];
            ushort runtimeBuildNumber = (ushort)runtimeInfoEvent.Payload["BclBuildNumber"];
            runtimeVersion = new Version(runtimeMajorVersion, runtimeMinorVersion, runtimeBuildNumber);
        }

        // The events are sorted by timestamp so the duration is the timestamp of the last event.
        var duration = TimeSpan.FromTicks(trace.Events[^1].TimeStamp / TimeSpan.NanosecondsPerTick);

        return new TraceExtraMetadata(filename, commandLine, osFamily, runtimeVersion, duration);
    }
}